"""
esi_requests.models
~~~~~~~~~~~~~~~~~~~

This module contains the primary objects that power esi_requests.
"""

import json
from dataclasses import dataclass, field
from typing import TYPE_CHECKING, Dict, List, Optional

from yarl import URL

from .exceptions import ESIResponseError

if TYPE_CHECKING:
    from .sso.token import Token
    from .utils import ESIParams


class ESIRequest:
    """Holds information of a request to ESI.

    Each ESIRequest is generated by the getitem method in ESIMetadata class,
    with request_key, request_type, parameters, and security set.
    The ESI class uses the ESIRequest got from ESIMetadata to perform parameter parse and check,
    and fill in the url, headers, params field.

    Args:
        request_key: str
            A string for the request path, such as "/characters/{character_id}/search/"
        request_type: str
            A string for the request type, such as "get" (not "GET").
        parameters: ESIParams
            A lists of Params hold by ESIParams.
        security: List[str]
            A list of str representing authentication scopes.
            API request with <= 1 scopes is supported.
        url: Optional[str]
            A string to request to. Contains the base url.
        headers: Optional[dict]
            A dictionary containing request headers,
            usually contains "Authorization" field, or other user defined fields.
        params: Optional[dict]
            A dictionary containing params for the url.
            Contains necessary info for ESI, such as {"type_id": 12005}
        kwd: Optional[dict]
            A dictionary containing keywords used for the request.
        token: Optional[Token]
            A Token instance used for this request. Default None if request is unauthenticated.
    """

    def __init__(self, endpoint, method, params, headers, **kwargs) -> None:
        self.endpoint = endpoint
        self.method = method
        self.params = params
        self.headers = headers
        self.kwargs = kwargs

        self.request_key: Optional[str] = None  # paths[key]
        self.request_type: Optional[str] = None  # 'GET' or 'POST'

        self.parameters: Optional[ESIParams] = None
        self.security: List[str] = None  # default to []

        self.url: str = None

        self.token: Token = None
        self.blocked = False

        self.prepared = False

    @property
    def real_url(self) -> URL:
        """Similar to aiohttp's request_info.real_url."""
        # This is very different from aiohttp's request_info.real_url,
        # which uses URL class in a more informative way.
        # This method is only intended for printing exception message correctly.
        if self.url is None:
            return URL()
        return URL(self.url)

    @property
    def rid(self):
        """Request id."""
        return (self.request_key, self.request_type, self.kwd, "request_id")


class PreparedESIRequest:
    def __init__(self, endpoint=None, method=None, url=None, params=None, headers=None, kwargs=None) -> None:
        self.endpoint: str = endpoint
        self.method: str = method

        self.url: str = url
        self.params: Dict = params
        self.headers: Dict = headers

        self.kwargs: Dict = kwargs

    def __repr__(self) -> str:
        return f"<PreparedESIRequest [{self.method}]>"


@dataclass
class ESIResponse:
    """The ``ESIResponse`` object, which contains ESI server's response.

    User should never create ``ESIResponse`` but gets it from API calls.

    Attributes: (referencing aiohttp doc)
        status: int
            HTTP status code of response.
        headers: dict
            A case insensitive dictionary with HTTP response headers.
        url: str
            URL of request.
        request_info: ESIRequest
            A reference to the ``ESIRequest`` object with url, params, headers used in request.
        text: bytes
            Response body decoded using utf-8.
        expires: str | None
            A RFC7231 formatted datetime string, if any.
        reason: str | None
            Reason-Phrase from aiohttp.ClientResponse.

    Note:
        ESI class uses status=-1 to mark an error internally. (well this is abnormal but a useful shortcut...)
    """

    status: int = None  # e.g. 404, 200
    headers: dict = None
    url: str = None
    request_info: "ESIRequest" = None
    text: Optional[str] = None
    expires: Optional[str] = None
    reason: Optional[str] = None

    def __bool__(self):
        return self.ok

    def __repr__(self) -> str:
        return f"<Response [{self.status}]>"

    @property
    def ok(self) -> bool:
        """Returns ``True`` if ``status`` is ``200`` or ``304``, ``False`` if not.

        This is **not** a check for ``200 OK``.
        """
        return self.status == 200 or self.status == 304

    def raise_for_status(self):
        # Please note that this raise_for_status() is only intended for printing out useful exception message.
        # This method does not recreate aiohttp.ClientResponse's raise_for_status().
        if self.status >= 400:
            raise ESIResponseError(self.status, self.request_info, self.reason)

    def json(self):
        """Returns json deserialized response body.

        Note that ESI all uses ``utf-8`` for encoding.
        """
        return json.loads(self.text)
